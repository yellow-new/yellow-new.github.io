<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MATLAB C2000 例程（二） ---ADC触发PWM</title>
    <url>/2021/08/21/ADC%E8%A7%A6%E5%8F%91PWM/</url>
    <content><![CDATA[<p>官方例程链接如下：<a href="https://ww2.mathworks.cn/help/supportpkg/texasinstrumentsc2000/examples.html?category=index&s_tid=CRUX_topnav">MATLAB</a></p>
<h2 id="一-模型"><a href="#一-模型" class="headerlink" title="一.模型"></a>一.模型</h2><p>总系统由两个子系统组成一个中断触发 一个ADC-PWM</p>
<p><img src="/images/ADCPWM1.png"></p>
<span id="more"></span> 

<p><strong>ADC-PWM系统</strong></p>
<p><img src="/images/ADCPWM2.png"></p>
<p>ADC触发pwm并且adc的输出为pwm的duty的输入，且为五倍关系。</p>
<h2 id="二-烧入过程"><a href="#二-烧入过程" class="headerlink" title="二.烧入过程"></a>二.烧入过程</h2><p><a href="">与上篇文章相似</a></p>
<h2 id="三-代码分析"><a href="#三-代码分析" class="headerlink" title="三.代码分析"></a>三.代码分析</h2><p>我们先看一下所生成的文件</p>
<p><img src="/images/ADCPWM3.png"></p>
<p>如红框所示 这些为所生成的文件</p>
<ul>
<li><p>c2807x_2837xx_adcpwmasynctest_ert_data.c </p>
<blockquote>
<p>主要定义了数据的大小</p>
</blockquote>
</li>
<li><p>c2807x_2837xx_adcpwmasynctest_ert.c</p>
<blockquote>
<p>初始化PWM和ADC 以及模型所使用的函数以及结构体</p>
</blockquote>
</li>
<li><p>c2837xDBoard_Realtime_Support.c</p>
<blockquote>
<p>一些常用型的库函数</p>
</blockquote>
</li>
<li><p>c2837xDSchedulerTimer0.c</p>
<blockquote>
<p>就是跟求解器步长相关的函数,如果加入积分模块很有可能就在这里运算。</p>
</blockquote>
</li>
<li><p>ert_main.c</p>
<blockquote>
<p>主函数</p>
</blockquote>
<h3 id="舒适化外设"><a href="#舒适化外设" class="headerlink" title="舒适化外设"></a>舒适化外设</h3></li>
<li><p>MW_c28xGlobalInterrupts.c</p>
</li>
<li><p>MW_c28xGPIO.c</p>
</li>
<li><p>MW_c28xx_adc.c</p>
</li>
<li><p>MW_c28xx_board.c</p>
</li>
<li><p>MW_c28xx_csl.c</p>
</li>
<li><p>MW_c28xx_pwm.c</p>
</li>
<li><p>MW_c28xx_xbar.c</p>
</li>
<li><p>profiler_Support.c  // 可能为调试文件暂未尝试 （看大佬这样说的）</p>
<h3 id="ert-main-c"><a href="#ert-main-c" class="headerlink" title="ert_main.c"></a>ert_main.c</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * File: ert_main.c</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Code generated for Simulink model &#x27;c2807x_2837xx_adcpwmasynctest_ert&#x27;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Model version                  : 9.1</span></span><br><span class="line"><span class="comment"> * Simulink Coder version         : 9.5 (R2021a) 14-Nov-2020</span></span><br><span class="line"><span class="comment"> * C/C++ source code generated on : Fri Aug  6 09:56:42 2021</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Target selection: ert.tlc</span></span><br><span class="line"><span class="comment"> * Embedded hardware selection: Texas Instruments-&gt;C2000</span></span><br><span class="line"><span class="comment"> * Code generation objectives: Unspecified</span></span><br><span class="line"><span class="comment"> * Validation result: Not run</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;c2807x_2837xx_adcpwmasynctest_ert.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;rtwtypes.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">int</span> IsrOverrun = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> boolean_T OverrunFlag = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rt_OneStep</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> boolean_T stopRequested;</span><br><span class="line"><span class="keyword">volatile</span> boolean_T runModel;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">float</span> modelBaseRate = <span class="number">0.2</span>; <span class="comment">//进入中断时间 0.2秒进入一次中断 </span></span><br><span class="line">  <span class="keyword">float</span> systemClock = <span class="number">200</span>;  <span class="comment">//CPU晶振频率，与Clocking中的参数相互对应</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Initialize variables */</span></span><br><span class="line">  stopRequested = <span class="literal">false</span>;</span><br><span class="line">  runModel = <span class="literal">false</span>;</span><br><span class="line">  c2000_flash_init();</span><br><span class="line">  init_board();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MW_EXEC_PROFILER_ON</span></span><br><span class="line"></span><br><span class="line">  config_profilerTimer();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  ;</span><br><span class="line">  rtmSetErrorStatus(c2807x_2837xx_adcpwmasynctes_M, <span class="number">0</span>); <span class="comment">//_M结构体的错误标志为0</span></span><br><span class="line">  c2807x_2837xx_adcpwmasynctest_ert_initialize(); <span class="comment">//初始化</span></span><br><span class="line">  globalInterruptDisable();</span><br><span class="line">  configureTimer0(modelBaseRate, systemClock); <span class="comment">// 初始化定时器计数时间</span></span><br><span class="line">  runModel =</span><br><span class="line">    rtmGetErrorStatus(c2807x_2837xx_adcpwmasynctes_M) == (<span class="literal">NULL</span>);</span><br><span class="line">  enableTimer0Interrupt();</span><br><span class="line">  enable_interrupts();</span><br><span class="line">  globalInterruptEnable();</span><br><span class="line">  <span class="keyword">while</span> (runModel) &#123;</span><br><span class="line">    stopRequested = !(</span><br><span class="line">                      rtmGetErrorStatus(c2807x_2837xx_adcpwmasynctes_M) == (<span class="literal">NULL</span>));</span><br><span class="line">  &#125; <span class="comment">//判断 stopRequested 不等于_M结构体的错误标志指向空指针</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Disable rt_OneStep() here */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Terminate model */</span></span><br><span class="line">  c2807x_2837xx_adcpwmasynctest_ert_terminate();</span><br><span class="line">  globalInterruptDisable();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * File trailer for generated code.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [EOF]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="c2807x-2837xx-adcpwmasynctest-ert-c"><a href="#c2807x-2837xx-adcpwmasynctest-ert-c" class="headerlink" title="c2807x_2837xx_adcpwmasynctest_ert.c"></a>c2807x_2837xx_adcpwmasynctest_ert.c</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * File: c2807x_2837xx_adcpwmasynctest_ert.c</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Code generated for Simulink model &#x27;c2807x_2837xx_adcpwmasynctest_ert&#x27;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Model version                  : 9.1</span></span><br><span class="line"><span class="comment"> * Simulink Coder version         : 9.5 (R2021a) 14-Nov-2020</span></span><br><span class="line"><span class="comment"> * C/C++ source code generated on : Fri Aug  6 09:56:42 2021</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Target selection: ert.tlc</span></span><br><span class="line"><span class="comment"> * Embedded hardware selection: Texas Instruments-&gt;C2000</span></span><br><span class="line"><span class="comment"> * Code generation objectives: Unspecified</span></span><br><span class="line"><span class="comment"> * Validation result: Not run</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;c2807x_2837xx_adcpwmasynctest_ert.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;c2807x_2837xx_adcpwmasynctest_ert_private.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Block signals (default storage) */</span></span><br><span class="line">B_c2807x_2837xx_adcpwmasyncte_T c2807x_2837xx_adcpwmasynctest_B;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Real-time model */</span></span><br><span class="line"><span class="keyword">static</span> RT_MODEL_c2807x_2837xx_adcpwm_T c2807x_2837xx_adcpwmasynctes_M_;</span><br><span class="line">RT_MODEL_c2807x_2837xx_adcpwm_T *<span class="keyword">const</span> c2807x_2837xx_adcpwmasynctes_M =</span><br><span class="line">  &amp;c2807x_2837xx_adcpwmasynctes_M_;</span><br><span class="line">uint16_T MW_adcAInitFlag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Hardware Interrupt Block: &#x27;&lt;Root&gt;/C28x Hardware Interrupt&#x27; */</span></span><br><span class="line"><span class="comment">//中断函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">isr_int1pie1_task_fcn</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="number">1</span> == runModel) &#123;</span><br><span class="line">    <span class="comment">/* Call the system: &lt;Root&gt;/ADC-PWM Subsystem */</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* S-Function (c28xisr_c2000): &#x27;&lt;Root&gt;/C28x Hardware Interrupt&#x27; */</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Output and update for function-call system: &#x27;&lt;Root&gt;/ADC-PWM Subsystem&#x27; */</span></span><br><span class="line">      &#123;</span><br><span class="line">        uint16_T rtb_Gain;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* S-Function (c2802xadc): &#x27;&lt;S1&gt;/ADC&#x27; */</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">/*  Internal Reference Voltage : Fixed scale 0 to 3.3 V range.  */</span></span><br><span class="line">          <span class="comment">/*  External Reference Voltage : Allowable ranges of VREFHI(ADCINA0) = 3.3 and VREFLO(tied to ground) = 0  */</span></span><br><span class="line">          c2807x_2837xx_adcpwmasynctest_B.ADC = (AdcaResultRegs.ADCRESULT0);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Gain: &#x27;&lt;S1&gt;/Gain&#x27; */</span></span><br><span class="line">        rtb_Gain = (uint16_T)(((uint32_T)</span><br><span class="line">          c2807x_2837xx_adcpwmasynctest_P.Gain_Gain *</span><br><span class="line">          c2807x_2837xx_adcpwmasynctest_B.ADC) &gt;&gt; <span class="number">13U</span>);  <span class="comment">// (40950&gt;&gt;13)*ADC采样结果 = 5*ADC_result</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* S-Function (c2802xpwm): &#x27;&lt;S1&gt;/ePWM&#x27; */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*-- Update CMPA value for ePWM1 --*/</span></span><br><span class="line">        &#123;</span><br><span class="line">          EPwm1Regs.CMPA.bit.CMPA = (uint16_T)(rtb_Gain);  <span class="comment">//赋值给结果寄存器</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* End of Outputs for S-Function (c28xisr_c2000): &#x27;&lt;Root&gt;/C28x Hardware Interrupt&#x27; */</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Model step function */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">c2807x_2837xx_adcpwmasynctest_ert_step</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* (no output/update code required) */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Model initialize function */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">c2807x_2837xx_adcpwmasynctest_ert_initialize</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* Registration code */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* initialize error status */</span></span><br><span class="line">  rtmSetErrorStatus(c2807x_2837xx_adcpwmasynctes_M, (<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* block I/O */</span></span><br><span class="line">  (<span class="keyword">void</span>) <span class="built_in">memset</span>(((<span class="keyword">void</span> *) &amp;c2807x_2837xx_adcpwmasynctest_B), <span class="number">0</span>,</span><br><span class="line">                <span class="keyword">sizeof</span>(B_c2807x_2837xx_adcpwmasyncte_T)); <span class="comment">//给结构体赋值为0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* SystemInitialize for S-Function (c28xisr_c2000): &#x27;&lt;Root&gt;/C28x Hardware Interrupt&#x27; incorporates:</span></span><br><span class="line"><span class="comment">   *  SubSystem: &#x27;&lt;Root&gt;/ADC-PWM Subsystem&#x27;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* System initialize for function-call system: &#x27;&lt;Root&gt;/ADC-PWM Subsystem&#x27; */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Start for S-Function (c2802xadc): &#x27;&lt;S1&gt;/ADC&#x27; */</span></span><br><span class="line">  <span class="keyword">if</span> (MW_adcAInitFlag == <span class="number">0</span>) &#123;</span><br><span class="line">    InitAdcA();</span><br><span class="line">    MW_adcAInitFlag = <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="comment">// 利用控制位只初始化ADC一次</span></span><br><span class="line"></span><br><span class="line">  config_ADCA_SOC0 ();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Start for S-Function (c2802xpwm): &#x27;&lt;S1&gt;/ePWM&#x27; */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*** Initialize ePWM1 modules ***/</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/*  // Time Base Control Register</span></span><br><span class="line"><span class="comment">       EPwm1Regs.TBCTL.bit.CTRMODE              = 2;          // Counter Mode</span></span><br><span class="line"><span class="comment">       EPwm1Regs.TBCTL.bit.SYNCOSEL             = 3;          // Sync Output Select</span></span><br><span class="line"><span class="comment">       EPwm1Regs.TBCTL2.bit.SYNCOSELX           = 0;          // Sync Output Select - additional options</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       EPwm1Regs.TBCTL.bit.PRDLD                = 0;          // Shadow select</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       EPwm1Regs.TBCTL2.bit.PRDLDSYNC           = 0;          // Shadow select</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       EPwm1Regs.TBCTL.bit.PHSEN                = 0;          // Phase Load Enable</span></span><br><span class="line"><span class="comment">       EPwm1Regs.TBCTL.bit.PHSDIR               = 0;          // Phase Direction Bit</span></span><br><span class="line"><span class="comment">       EPwm1Regs.TBCTL.bit.HSPCLKDIV            = 0;          // High Speed TBCLK Pre-scaler</span></span><br><span class="line"><span class="comment">       EPwm1Regs.TBCTL.bit.CLKDIV               = 0;          // Time Base Clock Pre-scaler</span></span><br><span class="line"><span class="comment">       EPwm1Regs.TBCTL.bit.SWFSYNC              = 0;          // Software Force Sync Pulse</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EPwm1Regs.TBCTL.all = (EPwm1Regs.TBCTL.all &amp; ~<span class="number">0x3FFF</span>) | <span class="number">0x32</span>;</span><br><span class="line">    EPwm1Regs.TBCTL2.all = (EPwm1Regs.TBCTL2.all &amp; ~<span class="number">0xF000</span>) | <span class="number">0x0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*-- Setup Time-Base (TB) Submodule --*/</span></span><br><span class="line">    EPwm1Regs.TBPRD = <span class="number">20480</span>;           <span class="comment">// Time Base Period Register</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* // Time-Base Phase Register</span></span><br><span class="line"><span class="comment">       EPwm1Regs.TBPHS.bit.TBPHS               = 0;          // Phase offset register</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EPwm1Regs.TBPHS.all = (EPwm1Regs.TBPHS.all &amp; ~<span class="number">0xFFFF0000</span>) | <span class="number">0x0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Time Base Counter Register</span></span><br><span class="line">    EPwm1Regs.TBCTR = <span class="number">0x0000</span>;          <span class="comment">/* Clear counter*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*-- Setup Counter_Compare (CC) Submodule --*/</span></span><br><span class="line">    <span class="comment">/*	// Counter Compare Control Register</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       EPwm1Regs.CMPCTL.bit.LOADASYNC           = 0U;          // Active Compare A Load SYNC Option</span></span><br><span class="line"><span class="comment">       EPwm1Regs.CMPCTL.bit.LOADBSYNC           = 0U;          // Active Compare B Load SYNC Option</span></span><br><span class="line"><span class="comment">       EPwm1Regs.CMPCTL.bit.LOADAMODE           = 0U;          // Active Compare A Load</span></span><br><span class="line"><span class="comment">       EPwm1Regs.CMPCTL.bit.LOADBMODE           = 0U;          // Active Compare B Load</span></span><br><span class="line"><span class="comment">       EPwm1Regs.CMPCTL.bit.SHDWAMODE           = 0;          // Compare A Register Block Operating Mode</span></span><br><span class="line"><span class="comment">       EPwm1Regs.CMPCTL.bit.SHDWBMODE           = 0;          // Compare B Register Block Operating Mode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EPwm1Regs.CMPCTL.all = (EPwm1Regs.CMPCTL.all &amp; ~<span class="number">0x3C5F</span>) | <span class="number">0x0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* EPwm1Regs.CMPCTL2.bit.SHDWCMODE           = 0;          // Compare C Register Block Operating Mode</span></span><br><span class="line"><span class="comment">       EPwm1Regs.CMPCTL2.bit.SHDWDMODE           = 0;          // Compare D Register Block Operating Mode</span></span><br><span class="line"><span class="comment">       EPwm1Regs.CMPCTL2.bit.LOADCSYNC           = 0U;          // Active Compare C Load SYNC Option</span></span><br><span class="line"><span class="comment">       EPwm1Regs.CMPCTL2.bit.LOADDSYNC           = 0U;          // Active Compare D Load SYNC Option</span></span><br><span class="line"><span class="comment">       EPwm1Regs.CMPCTL2.bit.LOADCMODE           = 0U;          // Active Compare C Load</span></span><br><span class="line"><span class="comment">       EPwm1Regs.CMPCTL2.bit.LOADDMODE           = 0U;          // Active Compare D Load</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EPwm1Regs.CMPCTL2.all = (EPwm1Regs.CMPCTL2.all &amp; ~<span class="number">0x3C5F</span>) | <span class="number">0x0</span>;</span><br><span class="line">    EPwm1Regs.CMPA.bit.CMPA = <span class="number">5000</span>;    <span class="comment">// Counter Compare A Register</span></span><br><span class="line">    EPwm1Regs.CMPB.bit.CMPB = <span class="number">0</span>;       <span class="comment">// Counter Compare B Register</span></span><br><span class="line">    EPwm1Regs.CMPC = <span class="number">0</span>;                <span class="comment">// Counter Compare C Register</span></span><br><span class="line">    EPwm1Regs.CMPD = <span class="number">0</span>;                <span class="comment">// Counter Compare D Register</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*-- Setup Action-Qualifier (AQ) Submodule --*/</span></span><br><span class="line">    EPwm1Regs.AQCTLA.all = <span class="number">96</span>; <span class="comment">// Action Qualifier Control Register For Output A</span></span><br><span class="line">    EPwm1Regs.AQCTLB.all = <span class="number">0</span>;  <span class="comment">// Action Qualifier Control Register For Output B</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*	// Action Qualifier Software Force Register</span></span><br><span class="line"><span class="comment">       EPwm1Regs.AQSFRC.bit.RLDCSF              = 0;          // Reload from Shadow Options</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EPwm1Regs.AQSFRC.all = (EPwm1Regs.AQSFRC.all &amp; ~<span class="number">0xC0</span>) | <span class="number">0x0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*	// Action Qualifier Continuous S/W Force Register</span></span><br><span class="line"><span class="comment">       EPwm1Regs.AQCSFRC.bit.CSFA               = 0;          // Continuous Software Force on output A</span></span><br><span class="line"><span class="comment">       EPwm1Regs.AQCSFRC.bit.CSFB               = 0;          // Continuous Software Force on output B</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EPwm1Regs.AQCSFRC.all = (EPwm1Regs.AQCSFRC.all &amp; ~<span class="number">0xF</span>) | <span class="number">0x0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*-- Setup Dead-Band Generator (DB) Submodule --*/</span></span><br><span class="line">    <span class="comment">/*	// Dead-Band Generator Control Register</span></span><br><span class="line"><span class="comment">       EPwm1Regs.DBCTL.bit.OUT_MODE             = 0;          // Dead Band Output Mode Control</span></span><br><span class="line"><span class="comment">       EPwm1Regs.DBCTL.bit.IN_MODE              = 0;          // Dead Band Input Select Mode Control</span></span><br><span class="line"><span class="comment">       EPwm1Regs.DBCTL.bit.POLSEL               = 0;          // Polarity Select Control</span></span><br><span class="line"><span class="comment">       EPwm1Regs.DBCTL.bit.HALFCYCLE            = 0;          // Half Cycle Clocking Enable</span></span><br><span class="line"><span class="comment">       EPwm1Regs.DBCTL.bit.SHDWDBREDMODE        = 0;          // DBRED shadow mode</span></span><br><span class="line"><span class="comment">       EPwm1Regs.DBCTL.bit.SHDWDBFEDMODE        = 0;          // DBFED shadow mode</span></span><br><span class="line"><span class="comment">       EPwm1Regs.DBCTL.bit.LOADREDMODE          = 4U;        // DBRED load</span></span><br><span class="line"><span class="comment">       EPwm1Regs.DBCTL.bit.LOADFEDMODE          = 4U;        // DBFED load</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EPwm1Regs.DBCTL.all = (EPwm1Regs.DBCTL.all &amp; ~<span class="number">0x8FFF</span>) | <span class="number">0x0</span>;</span><br><span class="line">    EPwm1Regs.DBRED.bit.DBRED = (uint16_T)(<span class="number">0</span>);</span><br><span class="line">                         <span class="comment">// Dead-Band Generator Rising Edge Delay Count Register</span></span><br><span class="line">    EPwm1Regs.DBFED.bit.DBFED = (uint16_T)(<span class="number">0</span>);</span><br><span class="line">                        <span class="comment">// Dead-Band Generator Falling Edge Delay Count Register</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*-- Setup Event-Trigger (ET) Submodule --*/</span></span><br><span class="line">    <span class="comment">/*	// Event Trigger Selection and Pre-Scale Register</span></span><br><span class="line"><span class="comment">       EPwm1Regs.ETSEL.bit.SOCAEN               = 1;          // Start of Conversion A Enable</span></span><br><span class="line"><span class="comment">       EPwm1Regs.ETSEL.bit.SOCASELCMP           = 0;</span></span><br><span class="line"><span class="comment">       EPwm1Regs.ETSEL.bit.SOCASEL              = 2;          // Start of Conversion A Select</span></span><br><span class="line"><span class="comment">       EPwm1Regs.ETPS.bit.SOCPSSEL              = 1;          // EPWM1SOC Period Select</span></span><br><span class="line"><span class="comment">       EPwm1Regs.ETSOCPS.bit.SOCAPRD2           = 1;</span></span><br><span class="line"><span class="comment">       EPwm1Regs.ETSEL.bit.SOCBEN               = 0;          // Start of Conversion B Enable</span></span><br><span class="line"><span class="comment">       EPwm1Regs.ETSEL.bit.SOCBSELCMP           = 0;</span></span><br><span class="line"><span class="comment">       EPwm1Regs.ETSEL.bit.SOCBSEL              = 1;          // Start of Conversion A Select</span></span><br><span class="line"><span class="comment">       EPwm1Regs.ETPS.bit.SOCPSSEL              = 1;          // EPWM1SOCB Period Select</span></span><br><span class="line"><span class="comment">       EPwm1Regs.ETSOCPS.bit.SOCBPRD2           = 1;</span></span><br><span class="line"><span class="comment">       EPwm1Regs.ETSEL.bit.INTEN                = 0;          // EPWM1INTn Enable</span></span><br><span class="line"><span class="comment">       EPwm1Regs.ETSEL.bit.INTSELCMP            = 0;</span></span><br><span class="line"><span class="comment">       EPwm1Regs.ETSEL.bit.INTSEL               = 1;          // Start of Conversion A Select</span></span><br><span class="line"><span class="comment">       EPwm1Regs.ETPS.bit.INTPSSEL              = 1;          // EPWM1INTn Period Select</span></span><br><span class="line"><span class="comment">       EPwm1Regs.ETINTPS.bit.INTPRD2            = 1;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EPwm1Regs.ETSEL.all = (EPwm1Regs.ETSEL.all &amp; ~<span class="number">0xFF7F</span>) | <span class="number">0x1A01</span>;</span><br><span class="line">    EPwm1Regs.ETPS.all = (EPwm1Regs.ETPS.all &amp; ~<span class="number">0x30</span>) | <span class="number">0x30</span>;</span><br><span class="line">    EPwm1Regs.ETSOCPS.all = (EPwm1Regs.ETSOCPS.all &amp; ~<span class="number">0xF0F</span>) | <span class="number">0x101</span>;</span><br><span class="line">    EPwm1Regs.ETINTPS.all = (EPwm1Regs.ETINTPS.all &amp; ~<span class="number">0xF</span>) | <span class="number">0x1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*-- Setup PWM-Chopper (PC) Submodule --*/</span></span><br><span class="line">    <span class="comment">/*	// PWM Chopper Control Register</span></span><br><span class="line"><span class="comment">       EPwm1Regs.PCCTL.bit.CHPEN                = 0;          // PWM chopping enable</span></span><br><span class="line"><span class="comment">       EPwm1Regs.PCCTL.bit.CHPFREQ              = 0;          // Chopping clock frequency</span></span><br><span class="line"><span class="comment">       EPwm1Regs.PCCTL.bit.OSHTWTH              = 0;          // One-shot pulse width</span></span><br><span class="line"><span class="comment">       EPwm1Regs.PCCTL.bit.CHPDUTY              = 0;          // Chopping clock Duty cycle</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EPwm1Regs.PCCTL.all = (EPwm1Regs.PCCTL.all &amp; ~<span class="number">0x7FF</span>) | <span class="number">0x0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*-- Set up Trip-Zone (TZ) Submodule --*/</span></span><br><span class="line">    EALLOW;</span><br><span class="line">    EPwm1Regs.TZSEL.all = <span class="number">0</span>;           <span class="comment">// Trip Zone Select Register</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*	// Trip Zone Control Register</span></span><br><span class="line"><span class="comment">       EPwm1Regs.TZCTL.bit.TZA                  = 3;          // TZ1 to TZ6 Trip Action On EPWM1A</span></span><br><span class="line"><span class="comment">       EPwm1Regs.TZCTL.bit.TZB                  = 3;          // TZ1 to TZ6 Trip Action On EPWM1B</span></span><br><span class="line"><span class="comment">       EPwm1Regs.TZCTL.bit.DCAEVT1              = 3;          // EPWM1A action on DCAEVT1</span></span><br><span class="line"><span class="comment">       EPwm1Regs.TZCTL.bit.DCAEVT2              = 3;          // EPWM1A action on DCAEVT2</span></span><br><span class="line"><span class="comment">       EPwm1Regs.TZCTL.bit.DCBEVT1              = 3;          // EPWM1B action on DCBEVT1</span></span><br><span class="line"><span class="comment">       EPwm1Regs.TZCTL.bit.DCBEVT2              = 3;          // EPWM1B action on DCBEVT2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EPwm1Regs.TZCTL.all = (EPwm1Regs.TZCTL.all &amp; ~<span class="number">0xFFF</span>) | <span class="number">0xFFF</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*	// Trip Zone Enable Interrupt Register</span></span><br><span class="line"><span class="comment">       EPwm1Regs.TZEINT.bit.OST                 = 0;          // Trip Zones One Shot Int Enable</span></span><br><span class="line"><span class="comment">       EPwm1Regs.TZEINT.bit.CBC                 = 0;          // Trip Zones Cycle By Cycle Int Enable</span></span><br><span class="line"><span class="comment">       EPwm1Regs.TZEINT.bit.DCAEVT1             = 0;          // Digital Compare A Event 1 Int Enable</span></span><br><span class="line"><span class="comment">       EPwm1Regs.TZEINT.bit.DCAEVT2             = 0;          // Digital Compare A Event 2 Int Enable</span></span><br><span class="line"><span class="comment">       EPwm1Regs.TZEINT.bit.DCBEVT1             = 0;          // Digital Compare B Event 1 Int Enable</span></span><br><span class="line"><span class="comment">       EPwm1Regs.TZEINT.bit.DCBEVT2             = 0;          // Digital Compare B Event 2 Int Enable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EPwm1Regs.TZEINT.all = (EPwm1Regs.TZEINT.all &amp; ~<span class="number">0x7E</span>) | <span class="number">0x0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*	// Digital Compare A Control Register</span></span><br><span class="line"><span class="comment">       EPwm1Regs.DCACTL.bit.EVT1SYNCE           = 0;          // DCAEVT1 SYNC Enable</span></span><br><span class="line"><span class="comment">       EPwm1Regs.DCACTL.bit.EVT1SOCE            = 1;          // DCAEVT1 SOC Enable</span></span><br><span class="line"><span class="comment">       EPwm1Regs.DCACTL.bit.EVT1FRCSYNCSEL      = 0;          // DCAEVT1 Force Sync Signal</span></span><br><span class="line"><span class="comment">       EPwm1Regs.DCACTL.bit.EVT1SRCSEL          = 0;          // DCAEVT1 Source Signal</span></span><br><span class="line"><span class="comment">       EPwm1Regs.DCACTL.bit.EVT2FRCSYNCSEL      = 0;          // DCAEVT2 Force Sync Signal</span></span><br><span class="line"><span class="comment">       EPwm1Regs.DCACTL.bit.EVT2SRCSEL          = 0;          // DCAEVT2 Source Signal</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EPwm1Regs.DCACTL.all = (EPwm1Regs.DCACTL.all &amp; ~<span class="number">0x30F</span>) | <span class="number">0x4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*	// Digital Compare B Control Register</span></span><br><span class="line"><span class="comment">       EPwm1Regs.DCBCTL.bit.EVT1SYNCE           = 0;          // DCBEVT1 SYNC Enable</span></span><br><span class="line"><span class="comment">       EPwm1Regs.DCBCTL.bit.EVT1SOCE            = 0;          // DCBEVT1 SOC Enable</span></span><br><span class="line"><span class="comment">       EPwm1Regs.DCBCTL.bit.EVT1FRCSYNCSEL      = 0;          // DCBEVT1 Force Sync Signal</span></span><br><span class="line"><span class="comment">       EPwm1Regs.DCBCTL.bit.EVT1SRCSEL          = 0;          // DCBEVT1 Source Signal</span></span><br><span class="line"><span class="comment">       EPwm1Regs.DCBCTL.bit.EVT2FRCSYNCSEL      = 0;          // DCBEVT2 Force Sync Signal</span></span><br><span class="line"><span class="comment">       EPwm1Regs.DCBCTL.bit.EVT2SRCSEL          = 0;          // DCBEVT2 Source Signal</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EPwm1Regs.DCBCTL.all = (EPwm1Regs.DCBCTL.all &amp; ~<span class="number">0x30F</span>) | <span class="number">0x0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*	// Digital Compare Trip Select Register</span></span><br><span class="line"><span class="comment">       EPwm1Regs.DCTRIPSEL.bit.DCAHCOMPSEL      = 0;          // Digital Compare A High COMP Input Select</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       EPwm1Regs.DCTRIPSEL.bit.DCALCOMPSEL      = 1;          // Digital Compare A Low COMP Input Select</span></span><br><span class="line"><span class="comment">       EPwm1Regs.DCTRIPSEL.bit.DCBHCOMPSEL      = 0;          // Digital Compare B High COMP Input Select</span></span><br><span class="line"><span class="comment">       EPwm1Regs.DCTRIPSEL.bit.DCBLCOMPSEL      = 1;          // Digital Compare B Low COMP Input Select</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EPwm1Regs.DCTRIPSEL.all = (EPwm1Regs.DCTRIPSEL.all &amp; ~ <span class="number">0xFFFF</span>) | <span class="number">0x1010</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*	// Trip Zone Digital Comparator Select Register</span></span><br><span class="line"><span class="comment">       EPwm1Regs.TZDCSEL.bit.DCAEVT1            = 0;          // Digital Compare Output A Event 1</span></span><br><span class="line"><span class="comment">       EPwm1Regs.TZDCSEL.bit.DCAEVT2            = 0;          // Digital Compare Output A Event 2</span></span><br><span class="line"><span class="comment">       EPwm1Regs.TZDCSEL.bit.DCBEVT1            = 0;          // Digital Compare Output B Event 1</span></span><br><span class="line"><span class="comment">       EPwm1Regs.TZDCSEL.bit.DCBEVT2            = 0;          // Digital Compare Output B Event 2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EPwm1Regs.TZDCSEL.all = (EPwm1Regs.TZDCSEL.all &amp; ~<span class="number">0xFFF</span>) | <span class="number">0x0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*	// Digital Compare Filter Control Register</span></span><br><span class="line"><span class="comment">       EPwm1Regs.DCFCTL.bit.BLANKE              = 0;          // Blanking Enable/Disable</span></span><br><span class="line"><span class="comment">       EPwm1Regs.DCFCTL.bit.PULSESEL            = 1;          // Pulse Select for Blanking &amp; Capture Alignment</span></span><br><span class="line"><span class="comment">       EPwm1Regs.DCFCTL.bit.BLANKINV            = 0;          // Blanking Window Inversion</span></span><br><span class="line"><span class="comment">       EPwm1Regs.DCFCTL.bit.SRCSEL              = 0;          // Filter Block Signal Source Select</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EPwm1Regs.DCFCTL.all = (EPwm1Regs.DCFCTL.all &amp; ~<span class="number">0x3F</span>) | <span class="number">0x10</span>;</span><br><span class="line">    EPwm1Regs.DCFOFFSET = <span class="number">0</span>;           <span class="comment">// Digital Compare Filter Offset Register</span></span><br><span class="line">    EPwm1Regs.DCFWINDOW = <span class="number">0</span>;           <span class="comment">// Digital Compare Filter Window Register</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*	// Digital Compare Capture Control Register</span></span><br><span class="line"><span class="comment">       EPwm1Regs.DCCAPCTL.bit.CAPE              = 0;          // Counter Capture Enable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EPwm1Regs.DCCAPCTL.all = (EPwm1Regs.DCCAPCTL.all &amp; ~<span class="number">0x1</span>) | <span class="number">0x0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*	// HRPWM Configuration Register</span></span><br><span class="line"><span class="comment">       EPwm1Regs.HRCNFG.bit.SWAPAB              = 0;          // Swap EPWMA and EPWMB Outputs Bit</span></span><br><span class="line"><span class="comment">       EPwm1Regs.HRCNFG.bit.SELOUTB             = 0;          // EPWMB Output Selection Bit</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EPwm1Regs.HRCNFG.all = (EPwm1Regs.HRCNFG.all &amp; ~<span class="number">0xA0</span>) | <span class="number">0x0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Update the Link Registers with the link value for all the Compare values and TBPRD */</span></span><br><span class="line">    <span class="comment">/* No error is thrown if the ePWM register exists in the model or not */</span></span><br><span class="line">    EPwm1Regs.EPWMXLINK.bit.TBPRDLINK = <span class="number">0</span>;</span><br><span class="line">    EPwm1Regs.EPWMXLINK.bit.CMPALINK = <span class="number">0</span>;</span><br><span class="line">    EPwm1Regs.EPWMXLINK.bit.CMPBLINK = <span class="number">0</span>;</span><br><span class="line">    EPwm1Regs.EPWMXLINK.bit.CMPCLINK = <span class="number">0</span>;</span><br><span class="line">    EPwm1Regs.EPWMXLINK.bit.CMPDLINK = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* SYNCPER - Peripheral synchronization output event</span></span><br><span class="line"><span class="comment">       EPwm1Regs.HRPCTL.bit.PWMSYNCSEL            = 0;          // EPWMSYNCPER selection</span></span><br><span class="line"><span class="comment">       EPwm1Regs.HRPCTL.bit.PWMSYNCSELX           = 0;          //  EPWMSYNCPER selection</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EPwm1Regs.HRPCTL.all = (EPwm1Regs.HRPCTL.all &amp; ~<span class="number">0x72</span>) | <span class="number">0x0</span>;</span><br><span class="line">    EDIS;</span><br><span class="line">    EALLOW;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Enable TBCLK within the EPWM*/</span></span><br><span class="line">    CpuSysRegs.PCLKCR0.bit.TBCLKSYNC = <span class="number">1</span>;</span><br><span class="line">    EDIS;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* End of SystemInitialize for S-Function (c28xisr_c2000): &#x27;&lt;Root&gt;/C28x Hardware Interrupt&#x27; */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Model terminate function */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">c2807x_2837xx_adcpwmasynctest_ert_terminate</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* (no terminate code required) */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * File trailer for generated code.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [EOF]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="c2837xDSchedulerTimer0-c"><a href="#c2837xDSchedulerTimer0-c" class="headerlink" title="c2837xDSchedulerTimer0.c"></a>c2837xDSchedulerTimer0.c</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Copyright 2015-2020 The MathWorks, Inc. */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;F2837xD_device.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;F2837xD_cputimer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;F2837xD_cputimervars.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MW_c28xx_pie.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;F2837xD_Ipc_drivers.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">rt_OneStep</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CPU01_TO_CPU02_PASSMSG  0x0003FFF4</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">uint32_t</span> mwInitStart;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">uint32_t</span> mwInitEnd;</span><br><span class="line"></span><br><span class="line"><span class="function">interrupt <span class="keyword">void</span> <span class="title">TINT0_isr</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK0</span></span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PIEIER1_stack_save = PieCtrlRegs.PIEIER1.all;</span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK1</span></span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PIEIER2_stack_save  = PieCtrlRegs.PIEIER2.all;</span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK2</span></span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PIEIER3_stack_save  = PieCtrlRegs.PIEIER3.all;</span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK3</span></span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PIEIER4_stack_save  = PieCtrlRegs.PIEIER4.all;</span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK4</span></span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PIEIER5_stack_save  = PieCtrlRegs.PIEIER5.all;</span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK5</span></span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PIEIER6_stack_save  = PieCtrlRegs.PIEIER6.all;</span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK6</span></span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PIEIER7_stack_save  = PieCtrlRegs.PIEIER7.all;</span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK7</span></span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PIEIER8_stack_save  = PieCtrlRegs.PIEIER8.all;</span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK8</span></span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PIEIER9_stack_save  = PieCtrlRegs.PIEIER9.all;</span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK9</span></span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PIEIER10_stack_save = PieCtrlRegs.PIEIER10.all;</span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK10</span></span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PIEIER11_stack_save = PieCtrlRegs.PIEIER11.all;</span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK11</span></span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PIEIER12_stack_save = PieCtrlRegs.PIEIER12.all;</span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK0</span></span><br><span class="line">        PieCtrlRegs.PIEIER1.all &amp;= ~PIEMASK0;      <span class="comment">/* disable group1 lower/equal priority interrupts */</span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK1</span></span><br><span class="line">        PieCtrlRegs.PIEIER2.all &amp;= ~PIEMASK1;      <span class="comment">/* disable group2 lower/equal priority interrupts */</span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK2</span></span><br><span class="line">        PieCtrlRegs.PIEIER3.all &amp;= ~PIEMASK2;      <span class="comment">/* disable group3 lower/equal priority interrupts */</span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK3</span></span><br><span class="line">        PieCtrlRegs.PIEIER4.all &amp;= ~PIEMASK3;      <span class="comment">/* disable group4 lower/equal priority interrupts */</span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK4</span></span><br><span class="line">        PieCtrlRegs.PIEIER5.all &amp;= ~PIEMASK4;      <span class="comment">/* disable group5 lower/equal priority interrupts */</span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK5</span></span><br><span class="line">        PieCtrlRegs.PIEIER6.all &amp;= ~PIEMASK5;      <span class="comment">/* disable group6 lower/equal priority interrupts */</span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK6</span></span><br><span class="line">        PieCtrlRegs.PIEIER7.all &amp;= ~PIEMASK6;      <span class="comment">/* disable group7 lower/equal priority interrupts */</span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK7</span></span><br><span class="line">        PieCtrlRegs.PIEIER8.all &amp;= ~PIEMASK7;      <span class="comment">/* disable group8 lower/equal priority interrupts */</span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK8</span></span><br><span class="line">        PieCtrlRegs.PIEIER9.all &amp;= ~PIEMASK8;      <span class="comment">/* disable group9 lower/equal priority interrupts */</span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK9</span></span><br><span class="line">        PieCtrlRegs.PIEIER10.all &amp;= ~PIEMASK9;     <span class="comment">/* disable group10 lower/equal priority interrupts */</span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK10</span></span><br><span class="line">        PieCtrlRegs.PIEIER11.all &amp;= ~PIEMASK10;    <span class="comment">/* disable group11 lower/equal priority interrupts */</span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK11</span></span><br><span class="line">        PieCtrlRegs.PIEIER12.all &amp;= ~PIEMASK11;    <span class="comment">/* disable group12 lower/equal priority interrupts */</span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	  <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK12</span></span><br><span class="line">		IER &amp;= ~(M_INT13);</span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	  <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK13</span></span><br><span class="line">		IER &amp;= ~(M_INT14);</span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	  </span><br><span class="line">      <span class="keyword">asm</span>(<span class="string">&quot; RPT #5 || NOP&quot;</span>);               <span class="comment">/* wait 5 cycles */</span> <span class="comment">//等待五个周期</span></span><br><span class="line">      IFR &amp;= ~IFRMASK;                            <span class="comment">/* eventually disable lower/equal priority pending interrupts */</span></span><br><span class="line">      PieCtrlRegs.PIEACK.all = IFRMASK;          <span class="comment">/* ACK to allow other interrupts from the same group to fire */</span></span><br><span class="line">      IER |= <span class="number">1</span>;</span><br><span class="line">      EINT;                                <span class="comment">/* global interrupt enable */</span></span><br><span class="line">      rt_OneStep();</span><br><span class="line">      DINT;                                <span class="comment">/* disable global interrupts during context switch, CPU will enable global interrupts after exiting ISR */</span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK0</span></span><br><span class="line">        PieCtrlRegs.PIEIER1.all = PIEIER1_stack_save;<span class="comment">/*restore PIEIER register that was modified */</span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span>  </span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK1</span></span><br><span class="line">        PieCtrlRegs.PIEIER2.all = PIEIER2_stack_save;<span class="comment">/*restore PIEIER register that was modified */</span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK2</span></span><br><span class="line">        PieCtrlRegs.PIEIER3.all = PIEIER3_stack_save;<span class="comment">/*restore PIEIER register that was modified */</span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK3</span></span><br><span class="line">        PieCtrlRegs.PIEIER4.all = PIEIER4_stack_save;<span class="comment">/*restore PIEIER register that was modified */</span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK4</span></span><br><span class="line">        PieCtrlRegs.PIEIER5.all = PIEIER5_stack_save;<span class="comment">/*restore PIEIER register that was modified */</span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK5</span></span><br><span class="line">        PieCtrlRegs.PIEIER6.all = PIEIER6_stack_save;<span class="comment">/*restore PIEIER register that was modified */</span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK6</span></span><br><span class="line">        PieCtrlRegs.PIEIER7.all = PIEIER7_stack_save;<span class="comment">/*restore PIEIER register that was modified */</span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK7</span></span><br><span class="line">        PieCtrlRegs.PIEIER8.all = PIEIER8_stack_save;<span class="comment">/*restore PIEIER register that was modified */</span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK8</span></span><br><span class="line">        PieCtrlRegs.PIEIER9.all = PIEIER9_stack_save;<span class="comment">/*restore PIEIER register that was modified */</span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK9</span></span><br><span class="line">        PieCtrlRegs.PIEIER10.all= PIEIER10_stack_save;<span class="comment">/*restore PIEIER register that was modified */</span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK10</span></span><br><span class="line">        PieCtrlRegs.PIEIER11.all= PIEIER11_stack_save;<span class="comment">/*restore PIEIER register that was modified */</span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK11</span></span><br><span class="line">        PieCtrlRegs.PIEIER12.all= PIEIER12_stack_save;<span class="comment">/*restore PIEIER register that was modified */</span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	  <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK12</span></span><br><span class="line">		IER |= M_INT13;</span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	  <span class="meta">#<span class="meta-keyword">ifdef</span> PIEMASK13</span></span><br><span class="line">		IER |= M_INT14;</span><br><span class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">configureTimer0</span><span class="params">(<span class="keyword">float</span> baseRate, <span class="keyword">float</span> systemClock)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifndef</span> TIC2000_SOC_BASEPRODUCT</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> CPU1</span></span><br><span class="line">        EINT;</span><br><span class="line">        <span class="keyword">uint32_t</span> ipcCountVar = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0x425</span> == mwInitStart)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* Wait until completion of CPU2 GPIO initialization */</span></span><br><span class="line">            <span class="keyword">while</span> ((<span class="number">0x36E</span> != mwInitEnd))</span><br><span class="line">            &#123;</span><br><span class="line">                ipcCountVar++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        DINT;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">	      <span class="keyword">uint32_t</span> *pulMsgRam;</span><br><span class="line">	      pulMsgRam = (<span class="keyword">void</span> *)CPU01_TO_CPU02_PASSMSG;</span><br><span class="line">        IPCLiteLtoRDataWrite(IPC_FLAG0, pulMsgRam[<span class="number">2</span>], <span class="number">0x36E</span>,</span><br><span class="line">                         IPC_LENGTH_32_BITS, IPC_FLAG31);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* InitCpuTimers() - CPU Timers are initialized in </span></span><br><span class="line"><span class="comment">     * MW_c28xx_board.c in the generated code.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Configure CPU-Timer 0 to interrupt every base rate. */</span></span><br><span class="line">	<span class="comment">/* Parameters:  Timer Pointer, CPU Freq in MHz, Period in usec. */</span></span><br><span class="line">	ConfigCpuTimer(&amp;CpuTimer0, systemClock, baseRate * <span class="number">1000000</span>);</span><br><span class="line">	StartCpuTimer0();</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> TIC2000_SOC_BASEPRODUCT</span></span><br><span class="line">	PieCtrlRegs.PIEIFR1.bit.INTx7 = <span class="number">1</span>;   <span class="comment">/* Set Pending interrupt for TINT0. TINT0 will trigger as soon as the its interrupt is enabled*/</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">	EALLOW;</span><br><span class="line">	PieVectTable.TIMER0_INT = &amp;TINT0_isr;     <span class="comment">/* Hook interrupt to the ISR*/</span></span><br><span class="line">	EDIS;</span><br><span class="line"></span><br><span class="line">	PieCtrlRegs.PIEIER1.bit.INTx7 = <span class="number">1</span>;   <span class="comment">/* Enable interrupt TINT0 */</span></span><br><span class="line">	IER |= M_INT1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stopTimer0</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StopCpuTimer0();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enableTimer0Interrupt</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">asm</span>(<span class="string">&quot; SETC INTM&quot;</span>); <span class="comment">/* Disable Interrupt Global Enable Bit - set it to 1 */</span></span><br><span class="line">	EALLOW;</span><br><span class="line">	PieCtrlRegs.PIEIER1.all |= (<span class="number">1</span> &lt;&lt; <span class="number">6</span>); <span class="comment">/* Enable PIER bit for timer 0 */</span></span><br><span class="line">	EDIS;</span><br><span class="line">	<span class="keyword">asm</span>(<span class="string">&quot; CLRC INTM&quot;</span>); <span class="comment">/* Enable Interrupt Global Enable Bit - set it to 0 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">disableTimer0Interrupt</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> isrEnabled = <span class="literal">false</span>;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">asm</span>(<span class="string">&quot; SETC INTM&quot;</span>); <span class="comment">/* Disable Interrupt Global Enable Bit - set it to 1 */</span></span><br><span class="line">    </span><br><span class="line">    isrEnabled = PieCtrlRegs.PIEIER1.all &amp; (<span class="number">1</span> &lt;&lt; <span class="number">6</span>) ;</span><br><span class="line">	EALLOW;</span><br><span class="line">	PieCtrlRegs.PIEIER1.all &amp;= ~(<span class="number">1</span> &lt;&lt; <span class="number">6</span>); <span class="comment">/* Disable PIER bit for timer 0 */</span></span><br><span class="line">	<span class="keyword">asm</span>(<span class="string">&quot; RPT #5 || NOP&quot;</span>);</span><br><span class="line">	IFR &amp;= <span class="number">0xFFFE</span>;</span><br><span class="line">	PieCtrlRegs.PIEACK.all = <span class="number">0x1</span>;</span><br><span class="line">	EDIS;</span><br><span class="line">	<span class="keyword">asm</span>(<span class="string">&quot; CLRC INTM&quot;</span>); <span class="comment">/* Enable Interrupt Global Enable Bit - set it to 0 */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> isrEnabled;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">restoreTimer0Interrupt</span><span class="params">(<span class="keyword">bool</span> isrStatus)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isrStatus)</span><br><span class="line">        enableTimer0Interrupt();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        disableTimer0Interrupt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="MW-c28xx-csl-c"><a href="#MW-c28xx-csl-c" class="headerlink" title="MW_c28xx_csl.c"></a>MW_c28xx_csl.c</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;c2000BoardSupport.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;F2837xD_device.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;F2837xD_Examples.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;F2837xD_GlobalPrototypes.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;rtwtypes.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;c2807x_2837xx_adcpwmasynctest_ert.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;c2807x_2837xx_adcpwmasynctest_ert_private.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enableExtInterrupt</span> <span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">disableWatchdog</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> *WatchdogWDCR = (<span class="keyword">void</span> *) <span class="number">0x7029</span>;</span><br><span class="line">  <span class="keyword">asm</span>(<span class="string">&quot; EALLOW &quot;</span>);</span><br><span class="line">  *WatchdogWDCR = <span class="number">0x0068</span>;</span><br><span class="line">  <span class="keyword">asm</span>(<span class="string">&quot; EDIS &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中断服务函数</span></span><br><span class="line"><span class="function">interrupt <span class="keyword">void</span> <span class="title">ADCA1_INT_isr</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  isr_int1pie1_task_fcn(); <span class="comment">//在c2807x_2837xx_adcpwmasynctest_ert.c中 为只要功能函数---改变占空比</span></span><br><span class="line">  EALLOW;</span><br><span class="line">  AdcaRegs.ADCINTFLGCLR.bit.ADCINT1 = <span class="number">1</span>;</span><br><span class="line">  EDIS;</span><br><span class="line">  PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;</span><br><span class="line">                                     <span class="comment">/* Acknowledge to receive more interrupts*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使能中断</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enable_interrupts</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  EALLOW;</span><br><span class="line">  PieVectTable.ADCA1_INT = &amp;ADCA1_INT_isr;<span class="comment">/* Hook interrupt to the ISR*/</span></span><br><span class="line">  EDIS;</span><br><span class="line">  PieCtrlRegs.PIEIER1.bit.INTx1 = <span class="number">1</span>;   <span class="comment">/* Enable interrupt ADCA1_INT*/</span></span><br><span class="line">  IER |= M_INT1;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Enable global Interrupts and higher priority real-time debug events:*/</span></span><br><span class="line">  EINT;                                <span class="comment">/* Enable Global interrupt INTM*/</span></span><br><span class="line">  ERTM;                               <span class="comment">/* Enable Global realtime interrupt DBGM*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>c2000</tag>
        <tag>simulink</tag>
      </tags>
  </entry>
  <entry>
    <title>MATLAB C2000 例程（一）---GPIO点灯</title>
    <url>/2021/08/21/GPIO%20%E7%82%B9%E7%81%AF/</url>
    <content><![CDATA[<p> 官方链接链接如下：<a href="https://ww2.mathworks.cn/help/supportpkg/texasinstrumentsc2000/ug/getting-started-example.html">MATLAB </a></p>
<h2 id="一-模型"><a href="#一-模型" class="headerlink" title="一 模型"></a>一 模型</h2><p><img src="/images/MATLAB1.png"></p>
<p>前面模块为时间模块 后面为gpio口 设置了翻转模式 这个为最简单的模式</p>
<span id="more"></span> 

<p><img src="/images/MATLAB2.png"></p>
<h2 id="（二）烧入过程"><a href="#（二）烧入过程" class="headerlink" title="（二）烧入过程"></a>（二）烧入过程</h2><ol>
<li>“CTRL+E”打开设置</li>
</ol>
<p><img src="/images/MATLAB3.png"></p>
<ol start="2">
<li>选择一下设置之后,准备烧入板卡</li>
</ol>
<p><img src="/images/MATLAB.png"></p>
<ol start="3">
<li>等待一段时间会在你的工作路径下生成对应的文件当然会生成ccs代码</li>
</ol>
<p><img src="/images/MATLAB4.png"></p>
<h2 id="（三）物理现象"><a href="#（三）物理现象" class="headerlink" title="（三）物理现象"></a>（三）物理现象</h2><p><img src="/images/diandeng.gif"></p>
<h2 id="四）代码分析"><a href="#四）代码分析" class="headerlink" title="(四）代码分析"></a>(四）代码分析</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * File: ert_main.c</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Code generated for Simulink model &#x27;c28379D_cpu1_blink&#x27;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Model version                  : 2.0</span></span><br><span class="line"><span class="comment"> * Simulink Coder version         : 9.5 (R2021a) 14-Nov-2020</span></span><br><span class="line"><span class="comment"> * C/C++ source code generated on : Wed Aug  4 22:46:51 2021</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Target selection: ert.tlc</span></span><br><span class="line"><span class="comment"> * Embedded hardware selection: Texas Instruments-&gt;C2000</span></span><br><span class="line"><span class="comment"> * Code generation objectives: Unspecified</span></span><br><span class="line"><span class="comment"> * Validation result: Not run</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;c28379D_cpu1_blink.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;rtwtypes.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">int</span> IsrOverrun = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> boolean_T OverrunFlag = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rt_OneStep</span><span class="params">(<span class="keyword">void</span>)</span>  		<span class="comment">// 该函数放在定时器当中的</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//启延时作用</span></span><br><span class="line">  <span class="comment">/* Check for overrun. Protect OverrunFlag against preemption */</span></span><br><span class="line">  <span class="keyword">if</span> (OverrunFlag++) &#123;</span><br><span class="line">    IsrOverrun = <span class="number">1</span>;</span><br><span class="line">    OverrunFlag--;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//开启定时器中断</span></span><br><span class="line">  enableTimer0Interrupt();</span><br><span class="line"><span class="comment">//io口电平翻转函数    </span></span><br><span class="line">  c28379D_cpu1_blink_step();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Get model outputs here */</span></span><br><span class="line">  disableTimer0Interrupt();</span><br><span class="line">  OverrunFlag--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> boolean_T stopRequested; <span class="comment">// </span></span><br><span class="line"><span class="keyword">volatile</span> boolean_T runModel;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">//状态标志位</span></span><br><span class="line">  <span class="keyword">float</span> modelBaseRate = <span class="number">1.0</span>;</span><br><span class="line">    晶振时钟频率</span><br><span class="line">  <span class="keyword">float</span> systemClock = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Initialize variables */</span></span><br><span class="line">  stopRequested = <span class="literal">false</span>;</span><br><span class="line">  runModel = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//烧入flash</span></span><br><span class="line">  c2000_flash_init();</span><br><span class="line">    <span class="comment">//板子外设初始化</span></span><br><span class="line">  init_board();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> MW_EXEC_PROFILER_ON</span></span><br><span class="line"><span class="comment">// 暂时不知道是干什么的&#123;可能为调试&#125;</span></span><br><span class="line">  config_profilerTimer();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  ;</span><br><span class="line">  rtmSetErrorStatus(c28379D_cpu1_blink_M, <span class="number">0</span>);<span class="comment">//初始化标志位</span></span><br><span class="line">  c28379D_cpu1_blink_initialize();<span class="comment">//初始化在simulink中设置的初始化</span></span><br><span class="line">  globalInterruptDisable();</span><br><span class="line">  configureTimer0(modelBaseRate, systemClock);</span><br><span class="line">  runModel =</span><br><span class="line">    rtmGetErrorStatus(c28379D_cpu1_blink_M) == (<span class="literal">NULL</span>);</span><br><span class="line">  enableTimer0Interrupt();</span><br><span class="line">  globalInterruptEnable();</span><br><span class="line">  <span class="keyword">while</span> (runModel) &#123;</span><br><span class="line">    stopRequested = !(</span><br><span class="line">                      rtmGetErrorStatus(c28379D_cpu1_blink_M) == (<span class="literal">NULL</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Disable rt_OneStep() here */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Terminate model */</span></span><br><span class="line">  c28379D_cpu1_blink_terminate();</span><br><span class="line">  globalInterruptDisable();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * File trailer for generated code.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [EOF]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    详细代码需要自己区理解</p>
]]></content>
      <tags>
        <tag>c2000</tag>
        <tag>simulink</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/08/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span> 

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>电赛训练---双闭环降压电路（Buck）</title>
    <url>/2021/03/20/DSP-BUCK%E7%94%B5%E8%B7%AF/</url>
    <content><![CDATA[<h3 id="1-BUCK电路展示"><a href="#1-BUCK电路展示" class="headerlink" title="1.BUCK电路展示"></a>1.BUCK电路展示</h3><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">电赛训练题，主程序主要为 双路adc+单路epwm+pid算法</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20210512112144593.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1N0ZXZlbl9uZXdfaA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<span id="more"></span> 

<h3 id="（1）-思维导图"><a href="#（1）-思维导图" class="headerlink" title="（1） 思维导图"></a>（1） 思维导图</h3><p><img src="https://img-blog.csdnimg.cn/20210512112158975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1N0ZXZlbl9uZXdfaA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="（2）BUCK电路实物演示"><a href="#（2）BUCK电路实物演示" class="headerlink" title="（2）BUCK电路实物演示"></a>（2）BUCK电路实物演示</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
   <iframe src="//player.bilibili.com/player.html?aid=972482870&bvid=BV1hp4y187gk&cid=317770147&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
</div>




<h2 id="2-实验材料"><a href="#2-实验材料" class="headerlink" title="2.实验材料"></a>2.实验材料</h2><hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>TMS320F28335</span><br><span class="line"><span class="number">2.</span>AD623 AD852</span><br><span class="line"><span class="number">3.L</span>M2596</span><br><span class="line"><span class="number">4.</span>SIC驱动芯片</span><br><span class="line"><span class="number">5.</span>SIC驱动驱动电源</span><br><span class="line"><span class="number">5.</span>SIC    </span><br><span class="line"><span class="number">5.</span>数码管</span><br><span class="line"><span class="number">6.</span>旋转编码开关</span><br></pre></td></tr></table></figure>


<h2 id="3-PID"><a href="#3-PID" class="headerlink" title="3.PID"></a>3.PID</h2><hr>
<p><img src="https://img-blog.csdnimg.cn/20210512112334235.png" alt="在这里插入图片描述"></p>
<table>
<thead>
<tr>
<th>P</th>
<th>Proportion（比例）</th>
<th>就是输入偏差乘以一个常数</th>
</tr>
</thead>
<tbody><tr>
<td>I</td>
<td>Integral（积分）</td>
<td>就是对输入偏差进行积分运算</td>
</tr>
<tr>
<td>D</td>
<td>Derivative（微分）</td>
<td>对输入偏差进行微分运算</td>
</tr>
</tbody></table>
<p>代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PID</span>&#123;</span></span><br><span class="line">           <span class="keyword">double</span> SetPoint;    <span class="comment">//设定目标 	Desired Value</span></span><br><span class="line">           <span class="keyword">double</span> Proportion;  <span class="comment">//比例常数	Proportional Const</span></span><br><span class="line">           <span class="keyword">double</span> Integral;    <span class="comment">// 积分常数	Integral Const</span></span><br><span class="line">           <span class="keyword">double</span> Derivative;  <span class="comment">//微分常数	Derivative Const</span></span><br><span class="line">           <span class="keyword">double</span> LastError;   <span class="comment">//Error[-1]</span></span><br><span class="line">           <span class="keyword">double</span> PrevError;   <span class="comment">//Error[-2]</span></span><br><span class="line">           <span class="keyword">double</span> SumError;    <span class="comment">//Sums of Errors</span></span><br><span class="line">		   &#125;;   </span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PID</span> <span class="title">spid</span>;</span>		<span class="comment">//定义结构体</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">PIDCalc</span><span class="params">(struct PID *pp,<span class="keyword">double</span> NextPoint)</span><span class="comment">//PID Calculate</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> dError,Error;</span><br><span class="line"></span><br><span class="line">	Error=pp-&gt;SetPoint-NextPoint;      	<span class="comment">//偏差</span></span><br><span class="line">	pp-&gt;SumError+=Error;               	<span class="comment">//积分</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(pp-&gt;SumError&gt;<span class="number">200</span>)				<span class="comment">//限幅</span></span><br><span class="line">	&#123;</span><br><span class="line">		pp-&gt;SumError=<span class="number">200</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(pp-&gt;SumError&lt;<span class="number">-200</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		pp-&gt;SumError=<span class="number">-200</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	dError=pp-&gt;LastError-pp-&gt;PrevError;	<span class="comment">//当前微分</span></span><br><span class="line"></span><br><span class="line">	pp-&gt;PrevError=pp-&gt;LastError;</span><br><span class="line">	pp-&gt;LastError=Error;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span>(pp-&gt;Proportion*Error    		<span class="comment">//比例项</span></span><br><span class="line">		  +pp-&gt;Integral*pp-&gt;SumError	<span class="comment">//积分项</span></span><br><span class="line">		  +pp-&gt;Derivative*dError);  <span class="comment">//微分项</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4-PID参数的整定"><a href="#4-PID参数的整定" class="headerlink" title="4.PID参数的整定"></a>4.PID参数的整定</h2><hr>
<h3 id="1-仿真"><a href="#1-仿真" class="headerlink" title="1.仿真"></a>1.仿真</h3><p><strong>MATLAB</strong>   仿真可以大概知道PID的范围，并且更好的理解闭环反馈</p>
<p><img src="https://img-blog.csdnimg.cn/20210512112400539.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1N0ZXZlbl9uZXdfaA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="2-串口打印"><a href="#2-串口打印" class="headerlink" title="2.串口打印"></a>2.串口打印</h3><p>通过串口将数据打印到上位机，将数据画图。可以非常直观的调节pid的参数，提高整定pid参数的速度。推荐使用 <a href="https://www.vofa.plus/">VOFA+</a>。  </p>
<p><img src="https://img-blog.csdnimg.cn/20210512112409694.gif" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20210512112432641.gif" alt="在这里插入图片描述"></p>
<h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><p>   <a href="http://yellownew.cn/">PROWINTER</a><br>    特别鸣谢prowinter的指导</p>
]]></content>
      <tags>
        <tag>c2000</tag>
        <tag>电力电子技术</tag>
      </tags>
  </entry>
  <entry>
    <title>MATLAB C2000 例程（三）---CLA与CPU交互blink LED</title>
    <url>/2021/08/24/CLA+Sinulink/</url>
    <content><![CDATA[<h1 id="一-CLA-Introduction"><a href="#一-CLA-Introduction" class="headerlink" title="一 . CLA  Introduction"></a>一 . CLA  Introduction</h1><hr>
<p>CLA为C2000为了减少CPU负荷而研发的并行<strong>协处理器</strong></p>
<p><img src="/images/cla1.png" alt="cla1"></p>
<span id="more"></span> 

<h2 id="1-CLA-Tasks—CLA任务"><a href="#1-CLA-Tasks—CLA任务" class="headerlink" title="1.CLA Tasks—CLA任务"></a>1.CLA Tasks—CLA任务</h2><ul>
<li><p>CLA有八个任务（Task1[优先级最高]-Tack8），存在与CPU交互的RAM空间。</p>
</li>
<li><p>其程序与数据存放在LS0-LS5 RAM中，并且有两个128字节的==CPU to CLA（CLA to CPU）==的消息寄存器。</p>
</li>
</ul>
<h2 id="2-Interrupt-trigger—触发条件"><a href="#2-Interrupt-trigger—触发条件" class="headerlink" title="2.Interrupt trigger—触发条件"></a>2.Interrupt trigger—触发条件</h2><ul>
<li><h3 id="Peripheral-interrupt-trigger（外部中断触发）"><a href="#Peripheral-interrupt-trigger（外部中断触发）" class="headerlink" title="Peripheral interrupt trigger（外部中断触发）"></a>Peripheral interrupt trigger（外部中断触发）</h3></li>
</ul>
<blockquote>
<p>每个Task都可以通过中断源触发</p>
<p>DmaClaSrcSelRegs.CLA1TASKSRCSELx[TASKx]写入相应的Value</p>
</blockquote>
<p><img src="/images/cla2.png" alt="cla1"></p>
<p><strong>Table 5-1</strong> 为不同触发源对应的Value（部分）</p>
<ul>
<li><strong>Software Trigger（软件触发）</strong></li>
</ul>
<blockquote>
<p>使用IACK指令或者写MIFRC寄存器</p>
<p>IACK #0x0001  //0001 给寄存器写0 触发Task1</p>
<p>IACK #0x0003  //0011 给寄存器写0 1触发Task1 Task2</p>
</blockquote>
<ul>
<li><strong>Background Task   (后台任务)</strong></li>
</ul>
<blockquote>
<p>Task 8 作为后台任务 一直在运行当中</p>
</blockquote>
<h2 id="3-CLA-Initialization-Sequence-CLA初始化过程"><a href="#3-CLA-Initialization-Sequence-CLA初始化过程" class="headerlink" title="3.CLA Initialization Sequence (CLA初始化过程)"></a>3.CLA Initialization Sequence (CLA初始化过程)</h2><p><img src="/images/cla3.png" alt="cla3"></p>
<h2 id="4-CLA-Illegal-Opcode-Behavior-CLA非法指令"><a href="#4-CLA-Illegal-Opcode-Behavior-CLA非法指令" class="headerlink" title="4.CLA Illegal Opcode Behavior  (CLA非法指令)"></a>4.CLA Illegal Opcode Behavior  (CLA非法指令)</h2><ul>
<li> <strong>The CLA will halt with the illegal opcode in the D2 phase of the pipeline as if it were a breakpoint. This will</strong></li>
</ul>
<p>  <strong>occur whether CLA breakpoints are enabled or not.</strong></p>
<ul>
<li><p><strong>The CLA will issue the task-specific interrupt to the PIE</strong></p>
</li>
<li><p><strong>The MIRUN bit for the task will remain set.</strong></p>
</li>
</ul>
<h1 id="二-SImulink-CLA-for-blighting-an-LED"><a href="#二-SImulink-CLA-for-blighting-an-LED" class="headerlink" title="二.SImulink CLA for blighting an LED"></a>二.SImulink CLA for blighting an LED</h1><hr>
<p>  <img src="/images/cla4.png" alt="cla4"></p>
<h2 id="1-烧入过程：详细见上一篇文章"><a href="#1-烧入过程：详细见上一篇文章" class="headerlink" title="1.烧入过程：详细见上一篇文章"></a>1.<a href="https://yellownew.cn/2021/08/21/GPIO%20%E7%82%B9%E7%81%AF/#more">烧入过程：详细见上一篇文章</a></h2><h2 id="2-Simulink-and-Code-分析"><a href="#2-Simulink-and-Code-分析" class="headerlink" title="2.Simulink  and Code  分析"></a>2.Simulink  and Code  分析</h2><h3 id="CLA-Task"><a href="#CLA-Task" class="headerlink" title="CLA Task"></a>CLA Task</h3><p>  simulink ：</p>
<p>  <img src="/images/cla5.png"></p>
<p>  code：</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">相对应来就看很容易看出器对应逻辑</span><br><span class="line"><span class="comment">/* CLA Interrupt block */</span></span><br><span class="line"><span class="function">__interrupt <span class="keyword">void</span> <span class="title">Cla1Task1</span> <span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* Call the system: &lt;Root&gt;/cla_subsystem */</span></span><br><span class="line">  <span class="comment">/* __mdebugstop(); */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Output and update for function-call system: &#x27;&lt;Root&gt;/cla_subsystem&#x27; */</span></span><br><span class="line">  &#123;</span><br><span class="line">    real32_T rtb_Sum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Sum: &#x27;&lt;S2&gt;/Sum&#x27; incorporates:</span></span><br><span class="line"><span class="comment">     *  Delay: &#x27;&lt;S2&gt;/Delay&#x27;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    rtb_Sum = input1 - fb_delay; <span class="comment">//延时函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* RelationalOperator: &#x27;&lt;S2&gt;/Relational Operator&#x27; incorporates:</span></span><br><span class="line"><span class="comment">     *  Constant: &#x27;&lt;S2&gt;/Constant&#x27;</span></span><br><span class="line"><span class="comment">     *  DataStoreWrite: &#x27;&lt;S2&gt;/Data Store Write&#x27;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Cla_out = (rtb_Sum &gt; <span class="number">0.5F</span>); <span class="comment">//高低电平</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Update for Delay: &#x27;&lt;S2&gt;/Delay&#x27; */</span></span><br><span class="line">    fb_delay = rtb_Sum;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Cla-out"><a href="#Cla-out" class="headerlink" title="Cla_out"></a>Cla_out</h3><p>  simulink:</p>
<p>  <img src="/images/cla6.png"></p>
<p>  code :</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">isr_int11pie1_task_fcn</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="number">1</span> == runModel) &#123;</span><br><span class="line">    <span class="comment">/* Call the system: &lt;Root&gt;/System executes at completion of CLA Task1 */</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* S-Function (c28xisr_c2000): &#x27;&lt;Root&gt;/C28x Hardware Interrupt&#x27; */</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Output and update for function-call system: &#x27;&lt;Root&gt;/System executes at completion of CLA Task1&#x27; */</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/* DataStoreRead: &#x27;&lt;S1&gt;/Data Store Read&#x27; */</span></span><br><span class="line">      c28379D_cpu1_blink_cla_B.input1_l = Cla_out; </span><br><span class="line"></span><br><span class="line">      <span class="comment">/* S-Function (c280xgpio_do): &#x27;&lt;S1&gt;/Digital Output&#x27; */</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> (c28379D_cpu1_blink_cla_B.input1_l)</span><br><span class="line">          GpioDataRegs.GPASET.bit.GPIO31 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          GpioDataRegs.GPACLEAR.bit.GPIO31 = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* End of Outputs for S-Function (c28xisr_c2000): &#x27;&lt;Root&gt;/C28x Hardware Interrupt&#x27; */</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  程序思路大致是:</p>
<p>  在Timer0中断函数中，手动触发CLA（利用汇编语句）。在CLA_Task1中会执行相应的模型算法，指向完毕之后。后进入CLA中断函数，在CLA中断函数中根据CLA运算结果，控制GPIO的翻转。</p>
<h1 id="三-Summary"><a href="#三-Summary" class="headerlink" title="三.  Summary"></a>三.  Summary</h1><hr>
<p>   CLA对于dsp来说是非常重要的东西，他可以大大的提高dsp的运算能力。还需要多多理解</p>
<p>   Matlab生成的程序，格式比较固定，多看几个就能大致明白结构。以后可能就是更多的是关于Simulink中模块的学习了！</p>
]]></content>
      <tags>
        <tag>c2000</tag>
        <tag>simulink</tag>
      </tags>
  </entry>
  <entry>
    <title>C2000---IQmath</title>
    <url>/2021/08/23/IQmath/</url>
    <content><![CDATA[<h1 id="一、Introduction–IQmath"><a href="#一、Introduction–IQmath" class="headerlink" title="一、Introduction–IQmath"></a>一、Introduction–IQmath</h1><p>Ti提供将浮点数转化为定点数的库，可以提高运算速度</p>
<p>TI手册中的原话：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">Texas Instruments TMS320C28x IQmath Library is collection of highly optimized and high precision mathematical functions for C/C++ </span><br><span class="line">programmers <span class="selector-tag">to</span> seamlessly port <span class="selector-tag">a</span> floating-point algorithm into fixed point <span class="selector-tag">code</span> on TMS320C28x devices. </span><br><span class="line">These routines are typically used </span><br><span class="line">in computationally intensive real-<span class="selector-tag">time</span> applications where optimal execution speed and high accuracy is critical.</span><br><span class="line">By using these routines you can achieve execution speeds considerable faster than equivalent <span class="selector-tag">code</span> written in standard ANSI C language.</span><br><span class="line">In addition, by providing ready-<span class="selector-tag">to</span>-use high precision functions, TI IQmath library can shorten significantly your DSP application development <span class="selector-tag">time</span>.</span><br></pre></td></tr></table></figure>

<span id="more"></span> 

<h1 id="二、Using-the-IQmath-Library"><a href="#二、Using-the-IQmath-Library" class="headerlink" title="二、Using the IQmath Library"></a>二、Using the IQmath Library</h1><h2 id="1-IQmath-Arguments-and-Data-Types"><a href="#1-IQmath-Arguments-and-Data-Types" class="headerlink" title="1.IQmath Arguments and Data Types"></a>1.IQmath Arguments and Data Types</h2><p>IQ1—IQ30 定义了不同大小和精度的数据类型</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq; <span class="comment">/* Fixed point data type: GLOBAL_Q format */</span>  <span class="comment">// 这个为全局变量 需要单独定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq30; <span class="comment">/* Fixed point data type: Q30 format */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq29; <span class="comment">/* Fixed point data type: Q29 format */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq28; <span class="comment">/* Fixed point data type: Q28 format */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq27; <span class="comment">/* Fixed point data type: Q27 format */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq26; <span class="comment">/* Fixed point data type: Q26 format */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq25; <span class="comment">/* Fixed point data type: Q25 format */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq24; <span class="comment">/* Fixed point data type: Q24 format */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq23; <span class="comment">/* Fixed point data type: Q23 format */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq22; <span class="comment">/* Fixed point data type: Q22 format */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq21; <span class="comment">/* Fixed point data type: Q21 format */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq20; <span class="comment">/* Fixed point data type: Q20 format */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq19; <span class="comment">/* Fixed point data type: Q19 format */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq18; <span class="comment">/* Fixed point data type: Q18 format */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq17; <span class="comment">/* Fixed point data type: Q17 format */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq16; <span class="comment">/* Fixed point data type: Q16 format */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq15; <span class="comment">/* Fixed point data type: Q15 format */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq14; <span class="comment">/* Fixed point data type: Q14 format */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq13; <span class="comment">/* Fixed point data type: Q13 format */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq12; <span class="comment">/* Fixed point data type: Q12 format */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq11; <span class="comment">/* Fixed point data type: Q11 format */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq10; <span class="comment">/* Fixed point data type: Q10 format */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq9; <span class="comment">/* Fixed point data type: Q9 format */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq8; <span class="comment">/* Fixed point data type: Q8 format */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq7; <span class="comment">/* Fixed point data type: Q7 format */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq6; <span class="comment">/* Fixed point data type: Q6 format */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq5; <span class="comment">/* Fixed point data type: Q5 format */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq4; <span class="comment">/* Fixed point data type: Q4 format */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq3; <span class="comment">/* Fixed point data type: Q3 format */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq2; <span class="comment">/* Fixed point data type: Q2 format */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> _iq1; <span class="comment">/* Fixed point data type: Q1 format */</span></span><br></pre></td></tr></table></figure>

<h2 id="2-IQmath-Data-type-Range-amp-Resolution"><a href="#2-IQmath-Data-type-Range-amp-Resolution" class="headerlink" title="2.IQmath Data type: Range &amp; Resolution"></a>2.IQmath Data type: Range &amp; Resolution</h2><p> 给出了每种数据类型的范围以及精度</p>
<p>特别提醒了 IQNsin, IQNcos, IQNatan2, IQNatan2PU, IQatan的函数是不支持<strong>Q30</strong>格式的</p>
<p><img src="/images/iqmath1.png" alt="image-20210814102534781"></p>
<h2 id="3-Calling-an-IQmath-Function-from-C"><a href="#3-Calling-an-IQmath-Function-from-C" class="headerlink" title="3.Calling an IQmath Function from C"></a>3.Calling an IQmath Function from C</h2><ul>
<li><p>在文件中包含IQmath.h文件</p>
</li>
<li><p>将代码与IQmath.h连接</p>
</li>
<li><p>在CMD文件中放置IQmath代码段</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;IQmathLib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159</span></span><br><span class="line">_iq input, sin_out;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* 0.25 x PI radians represented in Q29 format */</span></span><br><span class="line">input=_IQ29(<span class="number">0.25</span>*PI);</span><br><span class="line">sin_out =_IQ29sin(input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="4-IQmath-Naming-Conventions"><a href="#4-IQmath-Naming-Conventions" class="headerlink" title="4.IQmath Naming Conventions"></a>4.IQmath Naming Conventions</h2><pre><code>对于名字的命名 规则的介绍
</code></pre>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> GLOBAL_Q function, that takes input/output in GLOBAL_Q format</span><br><span class="line">C-Code Examples:</span><br><span class="line"> _IQsin(A) <span class="comment">/* High Precision SIN */</span></span><br><span class="line"> _IQcos(A) <span class="comment">/* High Precision COS */</span></span><br><span class="line"> _IQrmpy(A,B) <span class="comment">/* IQ multiply with rounding */</span></span><br><span class="line"> _IQmpy(A,B) <span class="comment">/* IQ multiply */</span></span><br><span class="line">    </span><br><span class="line"> Q-format specific functions to cater to Q1 to Q30 data format.</span><br><span class="line">    </span><br><span class="line">C-Code Examples:</span><br><span class="line"> _IQ29sin(A) <span class="comment">/* High Precision SIN: input/output are in Q29 */</span></span><br><span class="line"> _IQ28sin(A) <span class="comment">/* High Precision SIN: input/output are in Q28 */</span></span><br><span class="line"> _IQ27sin(A) <span class="comment">/* High Precision SIN: input/output are in Q27 */</span></span><br><span class="line"> _IQ26sin(A) <span class="comment">/* High Precision SIN: input/output are in Q26 */</span></span><br><span class="line"> _IQ25sin(A) <span class="comment">/* High Precision SIN: input/output are in Q25 */</span></span><br><span class="line"> _IQ24sin(A) <span class="comment">/* High Precision SIN: input/output are in Q24 */</span></span><br></pre></td></tr></table></figure>



<p><img src="/images/iqmath2.png" alt="image-20210814104701624"></p>
<h2 id="5-Selecting-the-GLOBAL-Q-format"><a href="#5-Selecting-the-GLOBAL-Q-format" class="headerlink" title="5.Selecting the GLOBAL_Q format"></a>5.Selecting the GLOBAL_Q format</h2><h4 id="CASE-1"><a href="#CASE-1" class="headerlink" title="CASE 1 :"></a>CASE 1 :</h4><p>默认Global_q格式设置为Q24。编辑“iqmathlib.h”标题文件以根据需要修改此值，用户可以从Q1到Q29选择为Global_Q格式。修改此值</p>
<p>意味着所有Global_Q函数将使用此Q格式进行输入/输出，除非在源代码中覆盖此符号定义。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> GLOBAL_Q</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GLOBAL_Q 24 <span class="comment">/* Q1 to Q29 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<h4 id="CASE-2"><a href="#CASE-2" class="headerlink" title="CASE 2 :"></a>CASE 2 :</h4><p>完整的系统由各种模块组成。某些模块可能需要不同的精度，然后是系统的其余部分。在这种情况下，我们需要过度乘以在“iqmathlib.h”文件中</p>
<p>定义的global_q，并使用本地q格式。这可以通过在Include语句之前定义模块的源文件中的Global_q常数来轻松完成</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GLOBAL_Q 27 <span class="comment">/* Set the Local Q value */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;IQmathLib.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="6-Converting-an-IQmath-Application-to-Floating-Point"><a href="#6-Converting-an-IQmath-Application-to-Floating-Point" class="headerlink" title="6.Converting an IQmath Application to Floating-Point"></a>6.Converting an IQmath Application to Floating-Point</h2><h3 id="IQmath-application-to-floating-point"><a href="#IQmath-application-to-floating-point" class="headerlink" title="IQmath application to floating point"></a>IQmath application to floating point</h3><ol>
<li><p>在IQMath头文件中，选择Float_Math。头文件将所有IQMATH函数调用转换为其浮点代码格式</p>
</li>
<li><p>在将浮点数写入设备寄存器时，您需要将浮点数转换为整数。同样在从寄存器读取值时，它需要转换为浮动。在这两种情况下，这是通过将数量乘以转换因子来完成的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">For example to convert a floating-point number to IQ15, multiply by <span class="number">32768.0</span>.   <span class="comment">//将float转化为IO15 需要乘以32769.0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> MATH_TYPE == IQ_MATH</span></span><br><span class="line">PwmReg = (int16)_IQtoIQ15(Var1);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">// MATH_TYPE is FLOAT_MATH</span></span></span><br><span class="line">PwmReg = (int16)(<span class="number">32768.0L</span>*Var1);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<h1 id="三、Function-Summary"><a href="#三、Function-Summary" class="headerlink" title="三、Function Summary"></a>三、Function Summary</h1><ul>
<li><p>Format conversion utilities : atoIQ, IQtoF, IQtoIQN etc.    //格式转化</p>
</li>
<li><p>Arithmetic Functions : IQmpy, IQdiv etc.      </p>
<p>//算数函数</p>
</li>
<li><p>Trigonometric Functions : IQsin, IQcos, IQatan2 etc.       //三角函数</p>
</li>
<li><p>Mathematical functions : IQsqrt, IQisqrt etc.                               //数学函数</p>
</li>
<li><p>Miscellaneous : IQabs, IQsat etc    </p>
<p>//其他                                               </p>
</li>
</ul>
<p><a href="https://www.ti.com.cn/cn/lit/sw/sprc990/sprc990.pdf?ts=1629795754578&ref_url=https%253A%252F%252Fwww.ti.com.cn%252Fsitesearch%252Fdocs%252Funiversalsearch.tsp%253FlangPref%253Dzh-CN%2526searchTerm%253Diqmath%2526nr%253D3376">详细文档</a></p>
</li>
</ol>
<h1 id="三-总结"><a href="#三-总结" class="headerlink" title="三.  总结"></a>三.  总结</h1><p><font color=#999AAA > 对于IQMATH的简单介绍，具体使用还请看手册Example。使用难度不大需要把头文件引入让后按照IQ格式区替换所需的代码即可</p>
<p>单还是需要注意一些用法的限制float的大小范围等</p>
]]></content>
      <tags>
        <tag>c2000</tag>
      </tags>
  </entry>
</search>
